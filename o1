diff --git a/.gitignore b/.gitignore
index 9b3bf02..8a7f202 100644
--- a/.gitignore
+++ b/.gitignore
@@ -12,4 +12,3 @@ meh.sh
 games.md
 test*
 ircbot
-/_IRCTESTER
diff --git a/_IRCTESTER b/_IRCTESTER
new file mode 160000
index 0000000..090cf38
--- /dev/null
+++ b/_IRCTESTER
@@ -0,0 +1 @@
+Subproject commit 090cf389bd24459a2a59dd18b99a83aa1d32e5db
diff --git a/includes/EventHandler.hpp b/includes/EventHandler.hpp
index f108b8b..c52ac1e 100644
--- a/includes/EventHandler.hpp
+++ b/includes/EventHandler.hpp
@@ -5,7 +5,7 @@
 class Server; // Forward declaration
 
 class EventHandler {
-private:
+public:
 	Server& _server;
 	int _epoll_fd;
 	std::map<int, Client>& _clients;
@@ -15,8 +15,6 @@ private:
 	void handleClientWrite(int fd);
 	void handleClientDisconnect(int fd, uint32_t events);
 	void cleanupClient(int fd);
-
-public:
 	EventHandler(Server& server, int epoll_fd, std::map<int, Client>& clients) : _server(server), _epoll_fd(epoll_fd), _clients(clients){};
 	~EventHandler() {};
 
diff --git a/includes/Server.hpp b/includes/Server.hpp
index 461b454..aaa6c49 100644
--- a/includes/Server.hpp
+++ b/includes/Server.hpp
@@ -61,7 +61,7 @@ class Server {
             std::string message_;
         };
         public:
-        void startServer(int epoll_fd, std::map<int, Client>& clients, Server& server);
+        void startServer(int epoll_fd, std::map<int, Client>& clients);
         int getServerSocket() const { return _serverSocket; }
         int getPort() const { return _port; }
 
diff --git a/src/Executioner.cpp b/src/Executioner.cpp
index 175b509..b242423 100644
--- a/src/Executioner.cpp
+++ b/src/Executioner.cpp
@@ -59,4 +59,5 @@ int Executioner::run(Client &cli, const std::string &msg, std::map<int, Client>&
 			return 0;
 		return -1;
 	}
+	return 0;
 }
\ No newline at end of file
diff --git a/src/channel.cpp b/src/channel.cpp
index 3e2752b..ec5ff8f 100644
--- a/src/channel.cpp
+++ b/src/channel.cpp
@@ -101,7 +101,7 @@ void Channel::broadcast(const std::string& nick, const std::string& msg, Server&
         Client* clientPtr = it->second;
         if (clientPtr && clientPtr->getNickname() != nick) {
             clientPtr->response(msg + "\r\n");
-            clientPtr->sendPendingMessages();
+            // clientPtr->sendPendingMessages();
         }
     }
 }
diff --git a/src/kick.cpp b/src/kick.cpp
index ca0cf82..f85fa36 100644
--- a/src/kick.cpp
+++ b/src/kick.cpp
@@ -64,7 +64,7 @@ void Kick::execute(Client &cli, const std::string& param, const std::string& cmd
             } else {
             channel->kickUser(target_nick, reason);
             target_client.response(":" + cli.getNickname() + " KICK " + target_nick + " :" + reason + "\r\n");
-            target_client.sendPendingMessages();
+            // target_client.sendPendingMessages();
             cli.response("You kicked " + target_nick + " from " + channel->getName() + " :" + reason + "\r\n");
             channel->broadcast(cli.getNickname(), ":" + cli.getNickname() + " KICK " + target_nick + " FROM " + channel->getName() + " :" + reason, server);
             }
diff --git a/src/main.cpp b/src/main.cpp
index 31cab6c..68e1c61 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -76,7 +76,7 @@ int main(int ac, char *av[]){
 		std::map<int, Client> clients;
 		Server server(std::atoi(av[1]), 10, std::string(av[2]));
 		int ep_fd = server.setEpoll();
-		server.startServer(ep_fd, clients, server);
+		server.startServer(ep_fd, clients);
 	}
 	catch (const std::exception& e) {
 		cerr << e.what() << endl;
diff --git a/src/privmsg.cpp b/src/privmsg.cpp
index 244f55e..5a16cfd 100644
--- a/src/privmsg.cpp
+++ b/src/privmsg.cpp
@@ -35,10 +35,10 @@ Privmsg::~Privmsg()
 }
 
 void Privmsg::handleFileTransfer(Client &cli, const std::string& param){
-	File file;
+	// File file;
 
-	cout << "Handling file transfer with param: " << param << endl;
-	file.execute(cli, param);
+	// cout << "Handling file transfer with param: " << param << endl;
+	// file.execute(cli, param);
 }
 
 void Privmsg::execute(Client &cli, const std::string& param, const std::string& cmd, std::map<int, Client>& clients, Server& server) {
@@ -68,7 +68,7 @@ void Privmsg::execute(Client &cli, const std::string& param, const std::string&
 		if (it->second.getNickname() == target) {
 			std::cout << "Sending message to user: " << target << std::endl;
 			it->second.response(":" + cli.getNickname() + " PRIVMSG " + target + " :" + message + "\r\n");
-			it->second.sendPendingMessages();
+			// it->second.sendPendingMessages();
 			userFound = true;
 			break;
 		}
diff --git a/src/server.cpp b/src/server.cpp
index c459930..a93b7af 100644
--- a/src/server.cpp
+++ b/src/server.cpp
@@ -154,8 +154,7 @@ int Server::handleCmd(Client &cli, int epoll_fd, map<int, Client>& clients, Serv
 				cli.markDisconnected();
 				return 0;
 			}
-			else
-				cli._msgBuffer.append(buffer, bytesRead);
+
 			continue;
 		}
 		else if (bytesRead == 0) {
@@ -174,6 +173,7 @@ int Server::handleCmd(Client &cli, int epoll_fd, map<int, Client>& clients, Serv
 		}
 	}
 
+	Executioner executioner;
 	string complete_cmd;
 	size_t pos;
 
@@ -192,9 +192,6 @@ int Server::handleCmd(Client &cli, int epoll_fd, map<int, Client>& clients, Serv
 
 		cout << "The current command to run: " << complete_cmd << "\n";
 		int result = executioner.run(cli, complete_cmd, clients, server);
-		if (cli._has_msg){
-			enableWrite( epoll_fd, fd);
-		}
 		if (result == -1) {
 			return -1;
 		}
@@ -202,11 +199,13 @@ int Server::handleCmd(Client &cli, int epoll_fd, map<int, Client>& clients, Serv
 		if (cli._has_msg)
 			enableWrite(epoll_fd, fd);
 	}
+
 	// leftover data
 	if (!cli._msgBuffer.empty()) {
 		cout << "Incomplete command in buffer (waiting for \\r\\n): " 
 		<< cli._msgBuffer << endl;
 	}
+
 	return 0;
 }
 
diff --git a/src/server_help.cpp b/src/server_help.cpp
index bb3d40b..1ed61a5 100644
--- a/src/server_help.cpp
+++ b/src/server_help.cpp
@@ -25,7 +25,7 @@ void EventHandler::handleNewConnection() {
 	int cli_fd = _server.initConnection(_clients);
 	if (cli_fd != -1) {
 		add_fd(_epoll_fd, cli_fd, EPOLLIN | EPOLLET);
-		
+
 		// Check for queud messages first
 		std::map<int, Client>::iterator it = _clients.find(cli_fd);
 		if (it != _clients.end() && it->second._has_msg) {
@@ -42,8 +42,8 @@ void EventHandler::handleClientRead(int fd) {
 		return;
 	}
 
-	int err = _server.handleCmd(it->second, _epoll_fd);
-	
+	int err = _server.handleCmd(it->second, _epoll_fd, _clients, _server);
+
 	if (err == -2) {
 		it->second.markDisconnected();
 	}
@@ -126,6 +126,7 @@ void EventHandler::processEvent(const epoll_event& event) {
 		handleClientWrite(fd);
 	}
 }
+
 void Server::startServer(int epoll_fd, map<int, Client>& clients) {
 	epoll_event events[MAX_EVENTS];
 	EventHandler handler(*this, epoll_fd, clients);
@@ -135,57 +136,17 @@ void Server::startServer(int epoll_fd, map<int, Client>& clients) {
 		
 		if (event_count == -1) {
 			if (errno == EINTR) {
-					continue;
+				continue;
 			}
 			ft_error(errno, "epoll_wait");
 			break;
 		}
-		
-		for (int i = 0; i < ec_; i++) {
-			int fd = events[i].data.fd;
-			if (fd == getServerSocket()) {
-				int cli_fd = initConnection(clients);
-				if (cli_fd != -1) {
-					add_fd(epoll_fd, cli_fd, EPOLLIN | EPOLLET | EPOLLOUT | EPOLLHUP);
-				}
-				continue;
-			}
-			if (events[i].events & EPOLLIN) {
-				map<int, Client>::iterator it = clients.find(fd);
-				if (it == clients.end()) {
-					del_and_close(epoll_fd, fd);
-					continue;
-				}
-				int err = handleCmd(it->second, epoll_fd);
-				// if (err == 0){
-				// 	continue;
-				// }
-				if (err == -1) {
-					continue; // Changed from break - keep processing other events
-				}
-				if (err == -2)
-				{
-					// clients[fd].markDisconnected();
-					del_and_close(epoll_fd, fd);
-					clients.erase(it);
-				}
-			}
-			if (events[i].events & EPOLLOUT) {
-				map<int, Client>::iterator it = clients.find(fd);
-				if (it == clients.end()) {
-					cerr << "Client fd=" << fd << " not found for EPOLLOUT" << endl;
-					del_and_close(epoll_fd, fd);
-					continue;
-				}
-				it->second.sendPendingMessages();
-			}
-			if ((events[i].events & (EPOLLHUP | EPOLLERR)) || clients[fd].should_quit) {
-				cout << "Client disconnected (HUP/ERR): fd=" << fd << endl;
-				del_and_close(epoll_fd, fd);
-				clients.erase(clients.find(fd));
-			}
+
+		for (int i = 0; i < event_count; i++) {
+			handler.processEvent(events[i]);
 		}
 	}
+
 	close(epoll_fd);
 	terminate(clients);
 }
\ No newline at end of file
